<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>willshen</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://willshen.cn/"/>
  <updated>2020-09-04T03:32:51.011Z</updated>
  <id>http://willshen.cn/</id>
  
  <author>
    <name>Will Shen</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>runApp()分析</title>
    <link href="http://willshen.cn/2020/09/03/flutter_run_app_analyze/"/>
    <id>http://willshen.cn/2020/09/03/flutter_run_app_analyze/</id>
    <published>2020-09-03T10:50:18.120Z</published>
    <updated>2020-09-04T03:32:51.011Z</updated>
    
    <content type="html"><![CDATA[<p>Flutter源码版本为1.12.13</p><p>用做简单的例子来讲,这个用户布局只有一个TextView</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">void main() &#x3D;&gt; runApp(</span><br><span class="line">    Text(&quot;你好&quot;,</span><br><span class="line">    textDirection: TextDirection.ltr),</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>首先来看runApp()方法:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">void run(Widgetr app)&#123;</span><br><span class="line">    WidgetsFultterBinding.ensureInitialized()</span><br><span class="line">        ..scheduleAttachRootWidget(app)</span><br><span class="line">        ..scheduleWarmUpFrame();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><ul><li>Step1.前置环境，主要是在WidgetsFultterBinding.ensureInitialized()</li></ul><p>首先来看WidgetsFultterBinding的定义,这个类从右WidgetBinding往左GestureBinding进行初始化，下面只罗列关键的一些初始化</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">class WidgetFlutterBinding extends BindingBase with GestureBinding, ServiceBinding, ScheduleBinding, PaintingBinding, SemanticsBinding, RenderBinding, WidgetBinding&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@WidgetBinding</span><br><span class="line">mixin WidgetBinding&#123;</span><br><span class="line">    BuildOwner _buildOwner;</span><br><span class="line"></span><br><span class="line">    void initInstances()&#123;</span><br><span class="line">        _buildOwner &#x3D; BuildOwner();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@RenderBinding</span><br><span class="line">mixin RenderBinding&#123;</span><br><span class="line">    PipelineOwner _pipelineOwner;</span><br><span class="line">    void initInstance()&#123;</span><br><span class="line">        _pipelineOwner &#x3D; PipelineOwner(...);</span><br><span class="line">        initRenderView();</span><br><span class="line">        addPersistentFrameCallback(_handlePersistentFrameCallback);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    void initRenerView()&#123;</span><br><span class="line">        render &#x3D; Render(...);</span><br><span class="line">        render.prepareInitialFrame();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    set renderView(RenderView value)&#123;</span><br><span class="line">        _pipelineOwner.rootNode &#x3D; value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@PipelineOwner</span><br><span class="line">class PipelineOnwer&#123;</span><br><span class="line">    AbstractNode _rootNode;</span><br><span class="line">    </span><br><span class="line">    set rootNode(AbstractNode value)&#123;</span><br><span class="line">        _rootNode?.attach(this);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@RendView</span><br><span class="line">void prepareInitialFrame()&#123;</span><br><span class="line">    scheduleInitialLayout();</span><br><span class="line">    sceduleInitialPaint(_updateMatricesAndCreateNewRootLayer());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void addPersistentFrameCallback(FrameCallback callback)&#123;</span><br><span class="line">    _persistentCallbacks.add(callback);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void _handlePersistentFrameCallback(Duration timeStamp)&#123;</span><br><span class="line">    drawFrame();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此，需要的前置工作都完成了，生成了一个PipelineOwner与RenderView并且互相持有。创建了一个BuildOnwer，在_persistentCallbacks中注册了回调函数_handlePersistentFrameCallback(),最终调用到drawFrame();</p><hr><ul><li>Step2 . scheduleAttachRootWidget(Widget)@WidgetBinding</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">void scheduleAttachRootWidget(Widget rootWidget)&#123;</span><br><span class="line">    Timer.run(()&#123;</span><br><span class="line">        attachRootWidget(rootWidget);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Element get renderViewElement &#x3D;&gt; _renerViewElement;</span><br><span class="line">Element _renderViewElement;</span><br><span class="line"></span><br><span class="line">void attachRootWidget(Widget rootWidget)&#123;</span><br><span class="line">    &#x2F;&#x2F;这里先生成一个RenderObjectToWidgetAdapter&lt;Render&gt;对象，再调用attachToRenerTree()生成一个Element,该Element为根</span><br><span class="line">    _renderViewElement &#x3D; RenderObjectToWidgetAdapter&lt;Render&gt;(</span><br><span class="line">        container: renderView,</span><br><span class="line">        chhild:rootWidget,</span><br><span class="line">    ).attachToRenderTree(buildOwner, renderViewElement);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@RenderObjectToWidgetAdapter&lt;Render&gt;</span><br><span class="line">class RenderObjectToWidgetAdapter&lt;T extends RenderObject&gt; extends RenderObjectWidget&#123;</span><br><span class="line">    &#x2F;&#x2F;就是用户自定义的Widget</span><br><span class="line">    final Widget child;</span><br><span class="line">    &#x2F;&#x2F;就是RenderView对象</span><br><span class="line">    final RenderObjectWithChildMixin&lt;T&gt; container;</span><br><span class="line">    </span><br><span class="line">    RenderObjectToWidgetElement&lt;T&gt; createElement() &#x3D;&gt; RenderObjectToWidgetElement&lt;T&gt;(this);</span><br><span class="line">    </span><br><span class="line">    RenderObjectWithChildMixin&lt;T&gt; createRenderObject(BuildContext context) &#x3D;&gt; container;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;重点</span><br><span class="line">    RenderObjectToWidgetElement&lt;T&gt; attachToRenderTree(BuildOwner owner,[RenderObjectToWidgetElement&lt;T&gt; element])&#123;</span><br><span class="line">        if(element &#x3D;&#x3D; null)&#123;</span><br><span class="line">            &#x2F;&#x2F;命中，入参element此时为null</span><br><span class="line">            &#x2F;&#x2F;lockState()@BuildOwner会调用callback</span><br><span class="line">            owner.lockState(()&#123;</span><br><span class="line">                &#x2F;&#x2F;可以看到，element会RenderObjectToWidgetElement&lt;RenderBox&gt;对象，并且内部的widget为this，即RenderObjectToWidgetAdapter&lt;RenderBox&gt;</span><br><span class="line">                element &#x3D; createElement();</span><br><span class="line">                element.assignOwner(owner);</span><br><span class="line">            &#125;);</span><br><span class="line">            owner.buildScope(element, ()&#123;</span><br><span class="line">                &#x2F;&#x2F;调用mount()函数入参均为0，这个方法在第三步讨论</span><br><span class="line">                element.mount(null,null);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">        return element</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Step3. mount(null,null)@RenderObjectToWidgetElement<RenderBox></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">@RenderObjectToWidgetElement</span><br><span class="line">void mount(Element parent, dynamic newSlot)&#123;</span><br><span class="line">    super.mount(parent,new Slot);</span><br><span class="line">    _rebuild();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@RenderObjectElement</span><br><span class="line">class RenderObjectElement&#123;</span><br><span class="line">    RenderObject _renderObject;</span><br><span class="line">    void mount(Element parent, dynamic newSlot)&#123;</span><br><span class="line">        &#x2F;&#x2F;对于REnderObjectToWidgetElement，widget就是RenderObjectToWidgetAdapter</span><br><span class="line">        &#x2F;&#x2F;于是返回的_renderObject就是RenderView</span><br><span class="line">        _renderObject &#x3D; widget.createRenderObject(this);</span><br><span class="line">        attachRenderObject(newSlot);</span><br><span class="line">    &#125;</span><br><span class="line">    void attachRenderObject(dynamic newSlot)&#123;</span><br><span class="line">        &#x2F;&#x2F;重点，是在这里进行生成RenderObject树的</span><br><span class="line">        &#x2F;&#x2F;_findAncestoreRenderObjectElement是向上寻找最近的RenderObjectElement，只有该Element才有RenderObject，</span><br><span class="line">        &#x2F;&#x2F;找到后将其作为当前RenderObject的parent，属于递归</span><br><span class="line">        &#x2F;&#x2F;在这里是根Element，所以不会执行</span><br><span class="line">        _ancestoreRenderObjectElement &#x3D; _findAncestoreRenderObjectElement();</span><br><span class="line">        &#x2F;&#x2F;由子类实现，一般来说是把自身挂到最近的父RenderObject上，递归生成RenderObject树</span><br><span class="line">        _ancestoreREnderObjectElement?.insertChildREnderObject(renderObject, newSlot);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    RenderObjectElement _findAncestoreRenderObjectElement()&#123;</span><br><span class="line">        Element ancestore &#x3D; _parent;</span><br><span class="line">        while(ancestore!&#x3D;null &amp;&amp; ancestore is! RenderObjectElement)&#123;</span><br><span class="line">            ancestore &#x3D; ancestore._parent;</span><br><span class="line">        &#125;</span><br><span class="line">        return ancestore;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;也是很关键，在这里方法里会进行递归，构造Widget树，Element树,RenderObject树</span><br><span class="line">void _rebuild()&#123;</span><br><span class="line">    &#x2F;&#x2F;在这里，_child为null,widget为RenderObjectToWidgetAdapter&lt;BoxRender&gt;,</span><br><span class="line">    &#x2F;&#x2F;于是widget.chil即为我们自定义的Widget，在这里就是Text()</span><br><span class="line">    _child &#x3D; updateChild(_child, widget.child, _rootChildSlot);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Element updateChild(Element child, Widget newWidget, dynamic newSlot)&#123;</span><br><span class="line">    &#x2F;&#x2F;因为child为null，于是直接是最后一步</span><br><span class="line">    return inflateWidget(newWidget, newSlot);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Element inflateWidget(Widget widget, dynamic newSlot)&#123;</span><br><span class="line">    &#x2F;&#x2F;创建子，即Text的Element</span><br><span class="line">    &#x2F;&#x2F;由具体的子类实现</span><br><span class="line">    final Element newChild&#x3D;newWidget.createElement();</span><br><span class="line">    &#x2F;&#x2F;该方法会递归构造Widget树，Element树，RenderObject树</span><br><span class="line">    &#x2F;&#x2F;该方法由具体的子类实现</span><br><span class="line">    newChild.mount(this, newSlot);</span><br><span class="line">    &#x2F;&#x2F;返回子的Element，并且挂载在当前RenderObjectToWidgetElement的_child上</span><br><span class="line">    return newChild;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>于是，我们拥有了一个RenderView和Pipeline对象，互相持有。<br>一个RenderObjectToWidgetElement<BoxRender>,其_child为Text(自己实现的Widget).createElement()对象，其widget成员变量为RenderObjectToWidgetAdapter<BoxREnder>，其_renderObject变量为RenderView<br>一个RenderObjectToWidgetAdapter&lt;BoxRender对象&gt;,其child为用户自定义的Widget，container为RenderView。该对象如其名，Adapter，属于一个桥接的功能。</p><hr><ul><li>Step4 三颗树的构造。</li></ul><p>我们的定义的子类的Text,因此要去Text的源码里面看了，之前分析到newWidget.createElement()/newChild.mount(this,newSlot).【newWidget为Text，this指向RenderObjectToWidgetElement,后面可以知道newChild为newWidget调用crateElement()创建的StatelessElement对象】</p><p>首先来看Text类的继承结构</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line">Text -&gt; StatelessWidget -&gt; Widget</span><br><span class="line">&#x2F;&#x2F;Text没有重写createElement()，该方法在StatelessWidget实现</span><br><span class="line"></span><br><span class="line">@StatelessWidget</span><br><span class="line">abstract class StatelessWidget extends Widget&#123;</span><br><span class="line">    &#x2F;&#x2F;执行完之后，Text创建了一个StatelessElement，其内部的widget即为Text本身,</span><br><span class="line">    &#x2F;&#x2F;并且将该StatelessElement作为RenderObjectToWidgetElement&lt;BoxRender&gt;的_child进行挂载</span><br><span class="line">    StatelessElement createElement() &#x3D;&gt; StatelessElement(this);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;StatelessElement继承自ComponentElement</span><br><span class="line"></span><br><span class="line">@ComponentElement</span><br><span class="line">abstract class ComponentElement extends Element&#123;</span><br><span class="line">    &#x2F;&#x2F;在这里parent为根RenderObjectToWidgetElement</span><br><span class="line">    void mount(Element parent, dynamic newSlot)&#123;</span><br><span class="line">        &#x2F;&#x2F;super.mount()将RenderObjectToWidgetElement最为parent进行挂载</span><br><span class="line">        &#x2F;&#x2F;将其owner作为本身的owner即BuildOwner，同时更新树的深度</span><br><span class="line">        super.mount(parent, newSlot);</span><br><span class="line">        _firstBuild();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    void _firstBuild()&#123;</span><br><span class="line">        rebuild();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    @Element</span><br><span class="line">    void rebuild()&#123;</span><br><span class="line">        ...</span><br><span class="line">        performRebuild();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    @ComponeneElement</span><br><span class="line">    void performRebuild()&#123;</span><br><span class="line">        Widget build&#x3D;build();</span><br><span class="line">        &#x2F;&#x2F;这里开始递归调用了，同时_child为null，会执行inflateWidget(),</span><br><span class="line">        &#x2F;&#x2F;已经分析过了，在递归挂载</span><br><span class="line">        &#x2F;&#x2F;从下面分析可以知道，这里的build是RichText对象</span><br><span class="line">        _child&#x3D;updateChild(_child, build, slot);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@StatelessElement</span><br><span class="line">class StatelessElemet extends ComponentElement&#123;</span><br><span class="line">    &#x2F;&#x2F;widgt为Text</span><br><span class="line">    Widget() &#x3D;&gt; widget.build(this);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Text</span><br><span class="line">class Text&#123;</span><br><span class="line">    Widget build(BuildCOntext context)&#123;</span><br><span class="line">        Widget result&#x3D;RichText(...);</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;于是开始调用RichText的createElement()与 update@Element();</span><br><span class="line">class RichText extends MultiChildRenderObjectWidget&#123;</span><br><span class="line">    _MouseREgionElement createElement()&#x3D;&gt;_MouseRegionElement(this);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class _MouseRegionElement extends SigleChildRenderObjectElement()&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class SingleChildREnderObjectElement extends RenderObjectElement&#123;</span><br><span class="line">    void mount(Element parent, dynamic newslot)&#123;</span><br><span class="line">        super.mount(parent, newSLot)</span><br><span class="line">        _child &#x3D; updateChild(_child, widget.child, null);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class RenderObjectElement&#123;</span><br><span class="line">    void mount(Element element, dynamic, newSlot)&#123;</span><br><span class="line">        super.mount(parent, newSlot);</span><br><span class="line">        _renderObject &#x3D; widget.createRenderObject(this);</span><br><span class="line">        &#x2F;&#x2F;在这里挂载RenderObject树</span><br><span class="line">        attachREnderObject(newSlot);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    void attachRenderObject(dynamic newSlot)&#123;</span><br><span class="line">        &#x2F;&#x2F;向上寻找最近的RenderObject，在这里就是REnderObjectToWidgetElement&lt;BoxRender&gt;</span><br><span class="line">        _ancestorRenderObjectElement&#x3D;_findAncestoreRenderObjectElement();</span><br><span class="line">        &#x2F;&#x2F;父类实现</span><br><span class="line">        _ancestorRenderObjectElement?.insertChildRenderObject(renderObject, newSLot);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    @RenderBojectToWidgetElement</span><br><span class="line">    void insertChildRenderObject(RenderObject child, dynamic slot)&#123;</span><br><span class="line">        &#x2F;&#x2F;将RichText创建的RenderObject挂载，最为child</span><br><span class="line">        renderObject.child &#x3D; child;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;来看看挂载的RenderObject是什么</span><br><span class="line">    @TextRich</span><br><span class="line">    RenderParagaph createRenderObject(BuildContext context)&#123;</span><br><span class="line">        return RenderParagraph();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，在向下递归的过程中并且会将子节点的Element挂载到当前节点的Element生成Element树，如果当前节点Element为RenderObjectElement的子类，则在mount()的过程中，会将该节点的RenderObject挂载到父RenderObjectElement上，生成RenderObject树。</p><p>要注意的是Widget其实不会生成一颗树，在Widget的属性类别也没有【Widget child】这个属性，在代码中也找不到树的生成，从父Widget也无法直接访问到子Widget，从子Widget也无法访问到父Widget。那么我们说的Widget树到底是什么东西。</p><p>在Flutter中，一般树特指Element树，因为每个Element都持有其对应的Widget，并且可以根据Element树生成对应的RenderObject树。</p><hr><ul><li><p>Step5</p><p>到此，我们在RenderObjectToWidgetElement中就构造好了Element树，RenderObject树，分别对应_child@RenderObjectToWidgetElement, _renderObject@RenderObjectToWidgetElement。</p></li></ul><p>下面就开始进行渲染的过程了</p><hr><ul><li>Setp6 渲染</li></ul><p>下面要分析的是scheduleWarmUpFrame()函数【runApp()】</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">@ScheduleBinding</span><br><span class="line">void scheduleWarmUpFrame()&#123;</span><br><span class="line">    Timer.run(()&#123;</span><br><span class="line">        &#x2F;&#x2F;不用关注</span><br><span class="line">        handleBeginFrame(null);</span><br><span class="line">    &#125;);</span><br><span class="line">    Timer.run(()&#123;</span><br><span class="line">        &#x2F;&#x2F;重点</span><br><span class="line">        handleDrawFrame();</span><br><span class="line">    &#125;);</span><br><span class="line">    &#x2F;&#x2F;这里就是调用engine进行绘制</span><br><span class="line">    &#x2F;&#x2F;scheduleFrame()@window   属于engine的native方法</span><br><span class="line">    scheduleFrame();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">void handleDrawFrame()&#123;</span><br><span class="line">    &#x2F;&#x2F;设定目前正在进行persistentCallbacks状态</span><br><span class="line">    _schedulerPhase &#x3D; SchedulePhase.phersistentCallbacks;</span><br><span class="line">    &#x2F;&#x2F;最上面分析过，最重要的一个callback在RenderBinding构造的时候添加了</span><br><span class="line">    &#x2F;&#x2F;即doFrame()@RenderBinding</span><br><span class="line">    for(FrameCallback callback in _persistemtCallbacks)&#123;</span><br><span class="line">        _invokeFrameCallback(callback, _currentFrameTimeStamp);</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@RenderBing</span><br><span class="line">void drawFrame()&#123;</span><br><span class="line">    &#x2F;&#x2F;布局</span><br><span class="line">    pipelineOwner.flushLayout();</span><br><span class="line">    &#x2F;&#x2F;合成</span><br><span class="line">    pipelineOwner.flushCompositingBits();</span><br><span class="line">    &#x2F;&#x2F;绘制</span><br><span class="line">    pipelineOwner.flustPaint();</span><br><span class="line">    render.conpositeFrame();</span><br><span class="line">    pipelineOwner.flushSemantics();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void flushLayout()&#123;</span><br><span class="line">    &#x2F;&#x2F;scheduleInitialLayout()@RenderView的时候，RenderView将自己加入了PipelineOwner._nodesNeedingLayout</span><br><span class="line">    &#x2F;&#x2F;遍历_nodesNeedingLayout</span><br><span class="line">    node._layoutWidhResize();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@RenderObject</span><br><span class="line">void _layoutWidhResize()&#123;</span><br><span class="line">    performLayout();</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@RenderView</span><br><span class="line">void performLayout()&#123;</span><br><span class="line">    &#x2F;&#x2F;对于RenderView来说，其Child就是在挂载RenderObject过程中挂载的，</span><br><span class="line">    &#x2F;&#x2F;在这里是RenderParagraph</span><br><span class="line">    child.layout(BoxConstraints.tight(_size);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@RenderObject</span><br><span class="line">void layout(Constraints constraints, &#123;bool parentUserSize&#x3D;false&#125;)&#123;</span><br><span class="line">    RenderObject relayoutBoundary;</span><br><span class="line">    &#x2F;&#x2F;this是RenderParagraph</span><br><span class="line">    relayoutBoundary &#x3D; this</span><br><span class="line">    &#x2F;&#x2F;根据子类具体实现，也是一般推荐子类只实现performLayout()的理由</span><br><span class="line">    performLayout();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@RenderParagraph</span><br><span class="line">void performLayout()&#123;</span><br><span class="line">    _layoutChildern(constraints);</span><br><span class="line">    _LayoutTextWithConstraints(constraints);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void _layoutChildren()&#123;</span><br><span class="line">    RenderBox child &#x3D; firstChild;</span><br><span class="line">    whild(child !&#x3D;null)&#123;</span><br><span class="line">        &#x2F;&#x2F;遍历执行子类的layout</span><br><span class="line">        child.layout(...);</span><br><span class="line">        child &#x3D; childAfter(child);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在RenderObject树进行向下遍历Layout后，layout的操作就算完成了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">@PipelineOwner</span><br><span class="line">voud flushPaint()&#123;</span><br><span class="line">    PaintingContext.repaintCompositedChild(node);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@PaintingContext</span><br><span class="line">static void repaintCompositedChild(RenderObject child, &#123;bool debugAlsoPaintParent &#x3D; false&#125;)&#123;</span><br><span class="line">    &#x2F;&#x2F;同理，这里的child是RenderView</span><br><span class="line">    _repaintCompositeChild(child);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static void _repaintCompositedChild(Render child)&#123;</span><br><span class="line">    child._paintWithContext(childContext, Offset.zero);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">@RenderObject</span><br><span class="line">void _paintWithContext(PaintingContext context, Offset offset)&#123;</span><br><span class="line">    paint(context, offset);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@RenderView</span><br><span class="line">void paint(PaintingContext context, Offset offset)&#123;</span><br><span class="line">    &#x2F;&#x2F;在这里，child就是RenderParagraph</span><br><span class="line">    context.paintChild(child,offset);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@PaintingContext</span><br><span class="line">void paintChild(RenderObject child, Offset offset)&#123;</span><br><span class="line">    &#x2F;&#x2F;在这里，child就是RenderParagraph，同上，会到底调用paint()</span><br><span class="line">    child._paintWithContext(child,offset);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@RenderParagraph</span><br><span class="line">void paint(PaintingContext context, Offset offset)&#123;</span><br><span class="line">    &#x2F;&#x2F;自身的绘制逻辑</span><br><span class="line">    while(child !&#x3D; null &amp;&amp; childIndex &lt; _textPainter.inlinePlaceholderBoxes.length)&#123;</span><br><span class="line">        &#x2F;&#x2F;执行child，递归调用</span><br><span class="line">        context.paintChild(child.offset);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>于是，会递归RenderObject树，进行perform(),再递归RenderObject，进行paint();<br>绘制完成后就可以调用engine进行绘制了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Flutter源码版本为1.12.13&lt;/p&gt;
&lt;p&gt;用做简单的例子来讲,这个用户布局只有一个TextView&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span clas
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Todo List</title>
    <link href="http://willshen.cn/2020/07/06/todo-list/"/>
    <id>http://willshen.cn/2020/07/06/todo-list/</id>
    <published>2020-07-06T06:51:13.507Z</published>
    <updated>2020-09-04T03:27:22.068Z</updated>
    
    <content type="html"><![CDATA[<p>[ ] 汇编<br>[ ] Linux<br>[ ] Flutter<br>[ ] ART<br>[ ] 软件安全/插件化/热修复…</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[ ] 汇编&lt;br&gt;[ ] Linux&lt;br&gt;[ ] Flutter&lt;br&gt;[ ] ART&lt;br&gt;[ ] 软件安全/插件化/热修复…&lt;/p&gt;

      
    
    </summary>
    
    
    
  </entry>
  
</feed>
